/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'cram-d' at '07/10/16 11:49' with Gradle 2.14.1
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.14.1/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "net.saliman:gradle-properties-plugin:1.4.5"
    }
}


// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'net.saliman.properties'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenLocal()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.21'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile 'junit:junit:4.12'
	testCompile "org.assertj:assertj-core:2.0.0"

    compile 'com.google.inject.extensions:guice-assistedinject:4.0'
    compile 'fr.univ-nantes.termsuite:termsuite-core:3.0.4'
	compile "commons-cli:commons-cli:1.2"
}


jar {
	// make it fat
    dependsOn configurations.runtime
	from( configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } ) {
		 exclude "META-INF/*"
    }

	exclude "**/lv/**"
	exclude "**/zh/**"
 	exclude "**/da/**"


	    // cannot exclude META-INF for groovy to run
	from( configurations.runtime.findAll{it.getAbsolutePath().contains("org.codehaus.groovy")}.collect { it.isDirectory() ? it : zipTree(it) } ) {
		include "META-INF/*"
	}


	// tune manifest
    manifest {
        attributes(
			"Implementation-Title": project.name,
			"Implementation-Version": project.getProperty("version"),
            "Built-By": System.getProperty('user.name'),
            "Built-Date": new Date(),
            "Built-JDK": System.getProperty('java.version'),
			"Main-Class": "fr.univnantes.termsuite.istex.IstexLauncher")
    }
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}


artifacts {
	archives javadocJar, sourcesJar
}

if(hasProperty("signing.keyId")
	&& hasProperty("signing.secretKeyRingFile")
	&& new File(project.getProperty("signing.secretKeyRingFile")).exists()
	) {
	// activate signing of artifacts, only if signing is configured properly
	signing {
		sign configurations.archives
	}
}

publishing {
	publications {
		maven(MavenPublication) {
			groupId project.getProperty("group")
			artifactId project.getProperty("name")
			version project.getProperty("version")
			from components.java

			artifact sourcesJar {
                classifier "sources"
            }
		}
	}
}

if(hasProperty("ossrh.username")) {
  uploadArchives {
  	repositories {
  	  mavenDeployer {
    		beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

      		repository(url: project.getProperty("oss.repository.release")) {
      		  authentication(userName: project.getProperty("ossrh.username"), password: project.getProperty("ossrh.password"))
      		}
      		snapshotRepository(url: project.getProperty("oss.repository.snapshot")) {
      		  authentication(userName: project.getProperty("ossrh.username"), password: project.getProperty("ossrh.password"))
      		}

      		pom.project {
      		  name project.getProperty("name")
      		  packaging 'jar'
      		  // optionally artifactId can be defined here
      		  description project.getProperty("description")
      		  url project.getProperty("url")

      		  scm {
      			  connection "scm:git:" + project.getProperty("termsuite.git.url")
      			  developerConnection "scm:git:" + project.getProperty("termsuite.git.url")
      			  url project.getProperty("termsuite.git.url")
      		  }

      		  licenses {
      			  license {
      				  name project.getProperty("license")
      				  url project.getProperty("licenseUrl")
      			  }
      		  }

      		  developers {
      			  developer {
      				  id project.getProperty("developer.id")
      				  name project.getProperty("developer.name")
      				  email project.getProperty("developer.email")
      			  }
      		  }
      		}
	     }
  	}
  }
} else {
  def msg = "Publishing to maven central (task uploadArchives) is not possible since no gradle property file is found (use \"\$ cp gradle.properties.sample gradle.properties\" and edit gradle.properties)"
  logger.warn(msg)
}
